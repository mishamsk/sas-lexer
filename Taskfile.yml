version: "3"

dotenv:
  - .env

tasks:
  # Python tasks
  py:_init:
    internal: true
    preconditions:
      # Check UV installed
      - sh: uv --version
        msg: "UV is not installed. Please install it before running this task."
    cmds:
      - |
        if test -d .venv; then
            echo Found existing virutal env at .venv. Removing...
            rm -fR .venv
        else
            echo No venv exist. Creating anew...
        fi
      # Create a virtual environment
      - uv venv --python python
      # Create local .env file if it doesn't exist
      - test -f .env || cp .env.example .env
      # Sync dependencies
      - task: py:sync
      # Set up pre-commit
      - pre-commit install
      - echo "Done"

  py:init:
    desc: "Checks system python is correct and sets up environment"
    preconditions:
      # Make sure .venv doesn't exist
      - sh: test ! -d .venv
        msg: "A virtual environment already exists. Please remove it before running or use py:init-force."
    cmds:
      - task: py:_init

  py:init-force:
    desc: "Checks system python is correct and recreates the environment"
    prompt: "Are you sure you want to recreate the virtual environment?"
    cmds:
      - task: clean-all-caches
      - task: clean-test
      - task: py:_init

  py:sync:
    desc: "Sync dependencies & install project"
    cmd: uv sync --all-extras --locked --compile-bytecode

  lint:
    desc: "Run linters"
    cmds:
      - uv run pre-commit run --all-files
      - cargo clippy --all-features -- -D warnings

  # Cleanup tasks
  clean-pyc:
    desc: remove Python file artifacts
    cmds:
      - find . -name '*.pyc' -not -path '*/.venv/*' -not -path '*/.tox/*' -exec rm -f {} +
      - find . -name '*.pyo' -not -path '*/.venv/*' -not -path '*/.tox/*' -exec rm -f {} +
      - find . -name '*~' -not -path '*/.venv/*' -not -path '*/.tox/*' -exec rm -f {} +
      - find . -name '__pycache__' -not -path '*/.venv/*' -not -path '*/.tox/*' -exec rm -fr {} +

  clean-test:
    desc: remove test and coverage artifacts
    cmds:
      - rm -f .coverage
      - rm -f .coverage.*
      - rm -f coverage.xml
      - rm -f report.xml
      - rm -fr htmlcov/
      - rm -fr .pytest_cache
      - rm -fr testtemp/

  clean-lint-caches:
    desc: remove lint (mypy, ruff) caches
    cmds:
      - rm -fr .mypy_cache
      - rm -fr .ruff_cache

  clean-all-caches:
    desc: remove all caches including Taskfile
    cmds:
      - task: clean-pyc
      - task: clean-lint-caches
      - rm -fr .pytest_cache
      - rm -fr .task

  clean:
    desc: Clean up everything. Similar to doing a fresh clone except for .env
    cmds:
      - task: clean-all-caches
      - task: clean-test
      - cargo clean

  # Build tasks
  build:rel:
    sources:
      - crates/**/*.*
      - Cargo.toml
      - Cargo.lock
    generates:
      - target/release/*.*
    cmds:
      - cargo build --release

  build:stats_polars:
    sources:
      - crates/**/*.*
      - Cargo.toml
      - Cargo.lock
    generates:
      - target/with_polars/*.*
    cmds:
      - cargo build -r --features polars --package sas_lexer_cli --target-dir target/with_polars

  build:dev:
    sources:
      - crates/**/*.*
      - Cargo.toml
      - Cargo.lock
      - src/**/*.*
      - pyproject.toml
      - uv.lock
    generates:
      - target/debug/*.*
    cmds:
      - cargo build
      - maturin develop --uv -r

  # Performance tasks
  perf:profile:
    desc: Profile the application
    cmds:
      - cargo bench --bench lexer -- --profile-time 5
      - |
        echo "Path to the profile: target/criterion/lex/lex/profile/flamegraph.svg"

  perf:cur:
    deps:
      - build:rel
    cmds:
      - hyperfine -N -w 10 "target/release/sas-lexer lex {{.SAS_LEX_SAMPLES}}"
      - hyperfine -N -w 5 "target/release/sas-lexer lex {{.PERF_LARGE_SAMPLE}}"

  perf:compare:
    desc: Compare the performance of the current build with the given SHA
    deps:
      - build:rel
    preconditions:
      # Check that the working directory is clean, no staged or unstaged changes
      - git diff --quiet
    requires:
      vars:
        - SHA
    cmds:
      # Create a tempdir for current build
      - mkdir -p tmpdir/
      - defer: rm -rf tmpdir/
      # Copy the current build to the tempdir
      - cp target/release/sas-lexer tmpdir/
      # Checkout the given SHA
      - git checkout {{.SHA}}
      # This will ensure we rebuild the project back at HEAD
      - defer: cargo build --release
      - defer: git checkout -
      # Build the given SHA
      - cargo build --release
      # Compare the performance of the current build with the given SHA
      - hyperfine -w 10 "tmpdir/sas-lexer lex {{.SAS_LEX_SAMPLES}}" "target/release/sas-lexer lex {{.SAS_LEX_SAMPLES}}"
      - hyperfine -w 5 "tmpdir/sas-lexer lex {{.PERF_LARGE_SAMPLE}}" "target/release/sas-lexer lex {{.PERF_LARGE_SAMPLE}}"
